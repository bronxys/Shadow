"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const form_data_1 = __importDefault(require("../form-data"));
const is_url_1 = __importDefault(require("is-url"));
const sleep_1 = __importDefault(require("../utils/sleep"));
function parseConvertVideoData(rawData) {
    const parsedData = {
        status: rawData.status,
        jobId: rawData.jobId ?? null,
        statusCode: rawData.statusCode,
        fileUrl: (0, is_url_1.default)(rawData.result) ? rawData.result : null
    };
    return parsedData;
}
const defaultOptions = {
    waitUntilGetUrl: true,
    requestOptions: {}
};
async function createConversionJob({ serverUrl, videoId, fileType, quality, fileName, token, tokenExpiresAt, waitUntilGetUrl = defaultOptions.waitUntilGetUrl, requestOptions = defaultOptions.requestOptions, corsProxyUrl }) {
    function createFormData() {
        const formData = new form_data_1.default();
        formData.append("v_id", videoId);
        formData.append("ftype", fileType);
        formData.append("fquality", quality);
        formData.append("fname", fileName);
        formData.append("token", token);
        formData.append("timeExpire", String(tokenExpiresAt));
        return formData;
    }
    const url = `${corsProxyUrl ?? ""}${serverUrl}/api/json/convert`;
    const formData = createFormData();
    const response = await axios_1.default.post(url, formData, { ...requestOptions });
    const data = parseConvertVideoData(response.data);
    while (!data.fileUrl && waitUntilGetUrl) {
        await (0, sleep_1.default)(500);
        try {
            const formData = createFormData();
            const currentResponse = await axios_1.default.post(url, formData, { timeout: 3000, ...requestOptions });
            const currentData = parseConvertVideoData(currentResponse.data);
            if (currentData.fileUrl) {
                data.fileUrl = currentData.fileUrl;
            }
        }
        catch (error) {
            console.log(error);
        }
    }
    return data;
}
exports.default = createConversionJob;
