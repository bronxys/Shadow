"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const form_data_1 = __importDefault(require("../form-data"));
const parsers_1 = require("../utils/parsers");
const defaultOptions = {
    origin: "home",
    requestOptions: {}
};
async function getVideoInfo({ videoUrl, origin = defaultOptions.origin, requestOptions = defaultOptions.requestOptions, corsProxyUrl }) {
    const url = `${corsProxyUrl ?? ""}https://x2download.app/api/ajaxSearch`;
    const formData = new form_data_1.default();
    formData.append("q", videoUrl);
    formData.append("vt", origin);
    const response = await axios_1.default.post(url, formData, { ...requestOptions });
    const data = parseVideoInfo(response.data);
    return data;
}
function parseFormats(formats) {
    const parsedFormats = [];
    for (const fileType in formats) {
        const formatSet = formats[fileType];
        for (const formatIndex in formatSet) {
            const format = formatSet[formatIndex];
            parsedFormats.push({
                fileExtension: format.f,
                quality: format.k,
                qualityKey: format.key,
                size: (0, parsers_1.parseStringFileSizeToBytes)(format.size)
            });
        }
    }
    return parsedFormats;
}
function parseVideoInfo(rawVideoInfo) {
    const videoInfo = {
        id: rawVideoInfo.vid,
        title: rawVideoInfo.title,
        fileName: rawVideoInfo.fn,
        token: rawVideoInfo.token,
        tokenExpiresAt: Number(rawVideoInfo.timeExpires),
        message: rawVideoInfo.mess,
        formats: parseFormats(rawVideoInfo.links),
        extra: {
            a: rawVideoInfo.a,
            p: rawVideoInfo.p,
            t: rawVideoInfo.t
        }
    };
    return videoInfo;
}
exports.default = getVideoInfo;
