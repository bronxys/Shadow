"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenericImageUploadService = void 0;
const axios_1 = __importDefault(require("axios"));
const url_1 = require("url");
const path_1 = __importDefault(require("path"));
const fs = __importStar(require("fs"));
class GenericImageUploadService {
    constructor() {
        this.axios = axios_1.default.create();
        this.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36'
        };
        this.uploadHeaders = {};
    }
    getUploadHeaders() {
        return Object.assign(Object.assign({}, this.headers), this.uploadHeaders);
    }
    async _downloadBinary(imageUrl) {
        // Download the image as an array buffer
        const response = await axios_1.default.get(imageUrl, {
            responseType: 'arraybuffer'
        });
        const urlObject = new url_1.URL(imageUrl);
        const filename = path_1.default.basename(urlObject.pathname);
        const extension = path_1.default.extname(urlObject.pathname);
        // Create a buffer from the downloaded image data
        const imageData = Buffer.from(response.data);
        return {
            data: imageData,
            filename,
            extension
        };
    }
    async uploadFromFile(filePath, filename) {
        const imageData = fs.readFileSync(filePath);
        filename !== null && filename !== void 0 ? filename : (filename = filePath.split('/').pop() || 'unknown');
        return this.uploadFromBinary(imageData, filename);
    }
    async uploadFormData(form) {
        return this.axios.post(this.uploadUrl, form.getBuffer(), {
            headers: Object.assign(Object.assign({}, this.getUploadHeaders()), form.getHeaders())
        });
    }
    async getUploadedImageDirectUrl(url, linkRx) {
        const response = await this.axios.get(url, {
            headers: this.headers
        });
        const match = linkRx.exec(response.data);
        if (!match) {
            throw new Error(`Direct link to image not found in page body: ${url}`);
        }
        return {
            directLink: match[1]
        };
    }
    async uploadFromUrl(url, randomFilename = false) {
        let { data, filename, extension } = await this._downloadBinary(url);
        if (randomFilename)
            filename = this.generateRandomString(6) + extension;
        return this.uploadFromBinary(data, filename);
    }
    generateRandomString(length) {
        let result = '';
        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        const charactersLength = characters.length;
        for (let i = 0; i < length; i++) {
            result += characters.charAt(Math.floor(Math.random() * charactersLength));
        }
        return result;
    }
}
exports.GenericImageUploadService = GenericImageUploadService;
//# sourceMappingURL=genericImageUploadService.js.map