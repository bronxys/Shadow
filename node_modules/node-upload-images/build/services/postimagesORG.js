"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostimagesORG = void 0;
const genericImageUploadService_1 = require("./genericImageUploadService");
const form_data_1 = __importDefault(require("form-data"));
class PostimagesORG extends genericImageUploadService_1.GenericImageUploadService {
    constructor() {
        super();
        this.uploadUrl = 'https://postimages.org/json/rr';
        this.token = '61aa06d6116f7331ad7b2ba9c7fb707ec9b182e8';
        this.session = this.generateRandomString(32);
        this.imageDirectLinkRx =
            /<meta property="og:image" content="(?<image_url>.+?)"/m;
        this.formFilename = 'file';
        this.uploadHeaders = Object.assign(Object.assign({}, this.headers), { 'x-requested-with': 'XMLHttpRequest', 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' });
    }
    async uploadFromBinary(imageData, filename) {
        var _a;
        const form = new form_data_1.default();
        form.append('token', this.token);
        form.append('optsize', 0);
        form.append('expire', 0);
        form.append('session_upload', Date.now());
        form.append('numfiles', 1);
        form.append('upload_session', this.session);
        form.append(this.formFilename, imageData, {
            filename
        });
        let uploadResponse = await super.uploadFormData(form);
        if (((_a = uploadResponse.data) === null || _a === void 0 ? void 0 : _a.status) === 'OK') {
            return await this.getUploadedImageDirectUrl(uploadResponse.data.url, this.imageDirectLinkRx);
        }
        else {
            throw new Error(`Upload failed, got incorrect response status:${JSON.stringify(uploadResponse.data)}`);
        }
    }
}
exports.PostimagesORG = PostimagesORG;
//# sourceMappingURL=postimagesORG.js.map