"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NewFastpicORG = void 0;
const genericImageUploadService_1 = require("./genericImageUploadService");
const form_data_1 = __importDefault(require("form-data"));
class NewFastpicORG extends genericImageUploadService_1.GenericImageUploadService {
    constructor() {
        super();
        this.uploadUrl = 'https://new.fastpic.org/v2upload/';
        this.imageDirectLinkRx = /Direct Link.+?value="(.+?)"/m;
        this.formFilename = 'file1';
        this.uploadHeaders = Object.assign(Object.assign({}, this.headers), { 'x-requested-with': 'XMLHttpRequest', 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' });
    }
    async uploadFromBinary(imageData, filename) {
        var _a;
        const form = new form_data_1.default();
        form.append('uploading', 1);
        form.append('delete_after', 0);
        form.append(this.formFilename, imageData, {
            filename
        });
        let uploadResponse = await super.uploadFormData(form);
        if ((_a = uploadResponse.data) === null || _a === void 0 ? void 0 : _a.view_link) {
            let match = this.imageDirectLinkRx.exec(uploadResponse.data.codes);
            if (!match) {
                throw new Error(`Direct link to image not found in page body`);
            }
            return { directLink: match[1] };
        }
        else {
            throw new Error(`Upload failed, got incorrect response status:${JSON.stringify(uploadResponse.data)}`);
        }
    }
}
exports.NewFastpicORG = NewFastpicORG;
//# sourceMappingURL=newFastpicORG.js.map