/// <reference types="node" />
import { AxiosInstance } from 'axios';
import FormData from 'form-data';
export type TGenericImageUploadResponse = {
    directLink: string;
};
export interface IGenericImageUploadService {
    uploadFromBinary(imageData: Buffer, filename: string): Promise<TGenericImageUploadResponse>;
    uploadFromFile(filePath: string, filename?: string): Promise<TGenericImageUploadResponse>;
    uploadFromUrl(url: string, randomFilename: boolean): Promise<TGenericImageUploadResponse>;
}
export declare abstract class GenericImageUploadService implements IGenericImageUploadService {
    protected axios: AxiosInstance;
    protected headers: {
        'User-Agent': string;
    };
    protected uploadHeaders: Record<string, string>;
    protected uploadUrl: string;
    protected getUploadHeaders(): Record<string, string>;
    private _downloadBinary;
    uploadFromFile(filePath: string, filename?: string): Promise<TGenericImageUploadResponse>;
    protected uploadFormData(form: FormData): Promise<import("axios").AxiosResponse<any, any>>;
    abstract uploadFromBinary(imageData: Buffer, filename: string): Promise<TGenericImageUploadResponse>;
    protected getUploadedImageDirectUrl(url: string, linkRx: RegExp): Promise<TGenericImageUploadResponse>;
    uploadFromUrl(url: string, randomFilename?: boolean): Promise<TGenericImageUploadResponse>;
    protected generateRandomString(length: number): string;
}
