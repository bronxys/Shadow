"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.answers = void 0;
const functions_1 = require("./functions");
const Client_1 = require("./constants/Client");
const https_proxy_agent_1 = require("https-proxy-agent");
const axios_1 = require("axios");
const html_entities_1 = require("html-entities");
const FormData = require("form-data");
var answers;
(function (answers) {
    answers[answers["Yes"] = 0] = "Yes";
    answers[answers["No"] = 1] = "No";
    answers[answers["DontKnow"] = 2] = "DontKnow";
    answers[answers["Probably"] = 3] = "Probably";
    answers[answers["ProbablyNot"] = 4] = "ProbablyNot";
})(answers || (exports.answers = answers = {}));
class Akinator {
    constructor({ region, childMode, proxyOptions }) {
        if (!region || !Client_1.regions.includes(region)) {
            throw new Error('Please specify a correct region. You can import regions I support or view docs. Then use it like so: new Aki({ region })');
        }
        this.currentStep = 0;
        this.region = region;
        this.uri = undefined;
        this.guess = undefined;
        this.progress = 0.00;
        this.step_last_proposition = '';
        this.guessCount = 0;
        this.childMode = childMode === true;
        this.uri = `https://${this.region}.akinator.com`;
        if (proxyOptions) {
            this.config = {
                httpsAgent: new https_proxy_agent_1.HttpsProxyAgent(proxyOptions),
                proxy: false,
            };
        }
        else {
            this.config = {};
        }
        this.question = '';
        this.answers = [];
    }
    /**
    * Starts the akinator session and game.
    */
    async start() {
        const url = `${this.uri}/game`;
        const formData = new FormData();
        formData.append('sid', '1');
        formData.append('cm', this.childMode.toString());
        const { status, data: text } = await axios_1.default.postForm(url, formData, this.config);
        if (status !== 200) {
            throw new functions_1.AkinatorAPIError('starting session error...', this.region);
        }
        this.question = text.match(/<p class="question-text" id="question-label">(.+)<\/p>/)[1];
        this.session = text.match(/session: '(.+)'/)[1];
        this.signature = text.match(/signature: '(.+)'/)[1];
        this.answers = [
            (0, html_entities_1.decode)(text.match(/<a class="li-game" href="#" id="a_yes" onclick="chooseAnswer\(0\)">(.+)<\/a>/)[1]),
            (0, html_entities_1.decode)(text.match(/<a class="li-game" href="#" id="a_no" onclick="chooseAnswer\(1\)">(.+)<\/a>/)[1]),
            (0, html_entities_1.decode)(text.match(/<a class="li-game" href="#" id="a_dont_know" onclick="chooseAnswer\(2\)">(.+)<\/a>/)[1]),
            (0, html_entities_1.decode)(text.match(/<a class="li-game" href="#" id="a_probably" onclick="chooseAnswer\(3\)">(.+)<\/a>/)[1]),
            (0, html_entities_1.decode)(text.match(/<a class="li-game" href="#" id="a_probaly_not" onclick="chooseAnswer\(4\)">(.+)<\/a>/)[1])
        ];
        return this;
    }
    /*
     * Continue to guess after a "win" (contine to play after a wrong result).
     */
    async continue() {
        if (!this.uri) {
            throw new Error(Client_1.noUriMsg);
        }
        if (!this.session || !this.signature) {
            throw new Error(Client_1.noSessionMsg);
        }
        const formData = new FormData();
        formData.append('step', this.currentStep.toString());
        formData.append('progression', this.progress.toString());
        formData.append('sid', '1');
        formData.append('cm', this.childMode.toString());
        formData.append('session', this.session);
        formData.append('signature', this.signature);
        const url = `${this.uri}/exclude`;
        const result = await (0, functions_1.request)(url, formData, this.config);
        if (result instanceof functions_1.AkinatorAPIError) {
            throw result;
        }
        this.progress = parseFloat(result.progression);
        this.question = result.question;
        this.currentStep = parseInt(result.step, 10);
        return result;
    }
    /**
     * Gets the next question for the akinator session.
     * @param {answers} answerID the answer to the question
     */
    async step(answer) {
        if (!this.uri) {
            throw new Error(Client_1.noUriMsg);
        }
        if (!this.session || !this.signature) {
            throw new Error(Client_1.noSessionMsg);
        }
        const formData = new FormData();
        formData.append('step', this.currentStep.toString());
        formData.append('progression', this.progress.toString());
        formData.append('sid', '1');
        formData.append('cm', this.childMode.toString());
        formData.append('answer', answer.toString());
        formData.append('step_last_proposition', '');
        formData.append('session', this.session);
        formData.append('signature', this.signature);
        const url = `${this.uri}/answer`;
        const result = await (0, functions_1.request)(url, formData, this.config);
        if (result instanceof functions_1.AkinatorAPIError) {
            throw result;
        }
        const guess = result;
        // akinator has guessed
        if (guess.id_base_proposition) {
            this.guess = guess;
            return guess;
        }
        // a normal step
        const akinatorResult = result;
        this.currentStep = parseInt(akinatorResult.step, 10);
        this.question = akinatorResult.question;
        this.progress = parseFloat(akinatorResult.progression);
        return akinatorResult;
    }
    /**
     * Reverts the game back a previous step.
     */
    async back() {
        if (!this.uri) {
            throw new Error(Client_1.noUriMsg);
        }
        if (!this.session || !this.signature) {
            throw new Error(Client_1.noSessionMsg);
        }
        const formData = new FormData();
        formData.append('step', this.currentStep.toString());
        formData.append('progression', this.progress.toString());
        formData.append('sid', '1');
        formData.append('cm', this.childMode.toString());
        formData.append('session', this.session);
        formData.append('signature', this.signature);
        const url = `${this.uri}/cancel_answer`;
        const result = await (0, functions_1.request)(url, formData, this.config);
        if (result instanceof functions_1.AkinatorAPIError) {
            throw result;
        }
        this.currentStep = parseInt(result.step, 10);
        this.progress = parseFloat(result.progression);
        this.question = result.question;
        return result;
    }
}
exports.default = Akinator;
//# sourceMappingURL=Akinator.js.map