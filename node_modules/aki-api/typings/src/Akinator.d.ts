import { AkinatorAPIError } from './functions';
import { region } from './constants/Client';
import { HttpsProxyAgentOptions } from 'https-proxy-agent';
import { AxiosRequestConfig } from 'axios';
import { AkinatorResult, AkinatorResultGuess } from './functions/Request';
interface AkinatorConstructor {
    region: region;
    childMode?: boolean;
    proxyOptions?: string | HttpsProxyAgentOptions<any>;
}
export declare enum answers {
    Yes = 0,
    No = 1,
    DontKnow = 2,
    Probably = 3,
    ProbablyNot = 4
}
export default class Akinator {
    currentStep: number;
    region: region;
    uri?: string;
    session?: string;
    progress: number;
    childMode: boolean;
    step_last_proposition: string;
    answers: string[];
    /** @deprecated use the `guessCount` property from `start()` and `step()` instead */
    guessCount: number;
    /** @deprecated use the `question` property from `start()` and `step()` instead */
    question?: string;
    signature?: string;
    config: AxiosRequestConfig;
    guess?: AkinatorResultGuess;
    constructor({ region, childMode, proxyOptions }: AkinatorConstructor);
    /**
    * Starts the akinator session and game.
    */
    start(): Promise<this>;
    continue(): Promise<AkinatorResult | AkinatorAPIError>;
    /**
     * Gets the next question for the akinator session.
     * @param {answers} answerID the answer to the question
     */
    step(answer: answers): Promise<AkinatorResult | AkinatorResultGuess | AkinatorAPIError>;
    /**
     * Reverts the game back a previous step.
     */
    back(): Promise<AkinatorResult | AkinatorAPIError>;
}
export {};
