import { BaseService } from "@/services/base";
import { ParagraphsResponse, SentencesResponse, Transcript, TranscriptList, CreateTranscriptParameters, CreateTranscriptOptions, Createable, Deletable, Listable, Retrieveable, SubtitleFormat, RedactedAudioResponse, WordSearchResponse } from "@/types";
import { AxiosInstance } from "axios";
import { FileService } from "../files";
export declare class TranscriptService extends BaseService implements Createable<Transcript, CreateTranscriptParameters, CreateTranscriptOptions>, Retrieveable<Transcript>, Deletable<Transcript>, Listable<TranscriptList> {
    private files;
    constructor(client: AxiosInstance, files: FileService);
    /**
     * Create a transcript.
     * @param params The parameters to create a transcript.
     * @param options The options used for creating the new transcript.
     * @returns A promise that resolves to the newly created transcript.
     */
    create(params: CreateTranscriptParameters, options?: CreateTranscriptOptions): Promise<Transcript>;
    private poll;
    /**
     * Retrieve a transcript.
     * @param id The identifier of the transcript.
     * @returns A promise that resolves to the transcript.
     */
    get(id: string): Promise<Transcript>;
    /**
     * Retrieves a paged list of transcript listings.
     * @param nextUrl The URL to retrieve the transcript list from. If not provided, the first page will be retrieved.
     * @returns
     */
    list(nextUrl?: string | null): Promise<TranscriptList>;
    /**
     * Delete a transcript
     * @param id The identifier of the transcript.
     * @returns A promise that resolves to the transcript.
     */
    delete(id: string): Promise<Transcript>;
    /**
     * Search through the transcript for a specific set of keywords.
     * You can search for individual words, numbers, or phrases containing up to five words or numbers.
     * @param id The identifier of the transcript.
     * @param id Keywords to search for.
     * @return A promise that resolves to the sentences.
     */
    wordSearch(id: string, words: string[]): Promise<WordSearchResponse>;
    /**
     * Retrieve all sentences of a transcript.
     * @param id The identifier of the transcript.
     * @return A promise that resolves to the sentences.
     */
    sentences(id: string): Promise<SentencesResponse>;
    /**
     * Retrieve all paragraphs of a transcript.
     * @param id The identifier of the transcript.
     * @return A promise that resolves to the paragraphs.
     */
    paragraphs(id: string): Promise<ParagraphsResponse>;
    /**
     * Retrieve subtitles of a transcript.
     * @param id The identifier of the transcript.
     * @param format The format of the subtitles.
     * @return A promise that resolves to the subtitles text.
     */
    subtitles(id: string, format?: SubtitleFormat): Promise<string>;
    /**
     * Retrieve redactions of a transcript.
     * @param id The identifier of the transcript.
     * @return A promise that resolves to the subtitles text.
     */
    redactions(id: string): Promise<RedactedAudioResponse>;
}
